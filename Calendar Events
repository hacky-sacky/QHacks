from tkinter import *
from tkinter import ttk
from tkcalendar import Calendar
import os

root = Tk()
root.geometry("600x600")

events_file = "events_by_date.txt"

if not os.path.exists(events_file):
    with open(events_file, "w") as file:
        pass

def show_events_for_date(selected_date):
    """
    This function shows the particular event for a selected
    date after selecting a date on the calendar then pressing
    "View Events". Same GUI as main show events page.
    """
    formatted_date = selected_date.lstrip("0").replace("/0", "/")
    events_window = Toplevel(root)
    events_window.title(f"Events on {formatted_date}")
    events_window.geometry("600x600")

    header_label = Label(events_window, text=f"Events on {formatted_date}", font=("Arial", 16, "bold"))
    header_label.pack(pady=10)

    events_frame = Frame(events_window)
    events_frame.pack(fill="both", expand=True, padx=10, pady=10)

    canvas = Canvas(events_frame)
    scrollbar = ttk.Scrollbar(events_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    events_found = False

    if os.path.exists(events_file):
        with open(events_file, "r") as file:
            for line in file:
                date, title, time, description, location, event_type = line.strip().split("|")
                if date == formatted_date:
                    events_found = True
                    event_box = Frame(scrollable_frame, borderwidth=1, relief="solid", padx=10, pady=10)
                    event_box.pack(fill="x", pady=5)

                    Label(event_box, text=title, font=("Arial", 14, "bold")).pack(anchor="w")
                    Label(event_box, text=f"Type: {event_type} | Time: {time} | Location: {location}", font=("Arial", 12)).pack(anchor="w")
                    Label(event_box, text=description, font=("Arial", 12, "italic")).pack(anchor="w", pady=5)

    if not events_found:
        Label(scrollable_frame, text="No events found on this date.", font=("Arial", 14)).pack(pady=20)

def calendar_page():
    """
    Main calendar event page which has all the stored
    events on the particular dates.
    """
    calendar_window = Toplevel(root)
    calendar_window.title("Event Calendar")
    calendar_window.geometry("500x500")

    Label(calendar_window, text="Select a Date", font=("Arial", 16, "bold")).pack(pady=10)

    cal = Calendar(calendar_window, selectmode='day', year=2025, month=1, day=25, showweeknumbers=False)
    cal.pack(pady=20, expand=True, fill=BOTH)

    def get_events():
        """
        Direct users to the events page for the particular
        date after they select a date from the calendar and
        then press the "View Events" button.
        """
        selected_date = cal.get_date()
        show_events_for_date(selected_date)

    Button(calendar_window, text="View Events", command=get_events).pack(pady=20)

def show_events_page():
    """
    This function displays the 'Events' page with all the events added
    by users.
    Reads the `events_by_date.txt` file and shows all events.
    """
    events_window = Toplevel(root)
    events_window.title("All Events")
    events_window.geometry("600x600")

    header_label = Label(events_window, text="All Events", font=("Arial", 18, "bold"))
    header_label.pack(pady=10)

    # Scrollable Frame
    events_frame = Frame(events_window)
    events_frame.pack(fill="both", expand=True, padx=10, pady=10)

    canvas = Canvas(events_frame)
    scrollbar = ttk.Scrollbar(events_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Read and display events
    events_found = False

    if os.path.exists(events_file):
        with open(events_file, "r") as file:
            for line in file:
                # Ensure the line is valid
                if "|" in line:
                    date, title, time, description, location, event_type = line.strip().split("|")
                    events_found = True

                    # Event Display
                    event_box = Frame(scrollable_frame, borderwidth=1, relief="solid", padx=10, pady=10)
                    event_box.pack(fill="x", pady=5)

                    Label(event_box, text=title, font=("Arial", 14, "bold")).pack(anchor="w")
                    Label(event_box, text=f"Date: {date} | Type: {event_type}", font=("Arial", 12)).pack(anchor="w")
                    Label(event_box, text=f"Time: {time} | Location: {location}", font=("Arial", 12)).pack(anchor="w")
                    Label(event_box, text=description, font=("Arial", 12, "italic")).pack(anchor="w", pady=5)

    if not events_found:
        Label(scrollable_frame, text="No events found.", font=("Arial", 14)).pack(pady=20)

def add_event_page():
    def save_event():
        title = title_entry.get()
        date = cal.get_date()
        start_time = start_time_entry.get()
        end_time = end_time_entry.get()
        description = description_text.get("1.0", END).strip()
        location = location_entry.get()
        event_type = event_type_var.get()

        if not title or not date or not start_time or not end_time or not location or not event_type:
            error_label.config(text="All fields are required!", fg="red")
            return

        formatted_date = date.lstrip("0").replace("/0", "/")

        with open(events_file, "a") as file:
            file.write(f"{formatted_date}|{title}|{start_time}-{end_time}|{description}|{location}|{event_type}\n")

        error_label.config(text="Event added successfully!", fg="green")

        title_entry.delete(0, END)
        start_time_entry.delete(0, END)
        end_time_entry.delete(0, END)
        description_text.delete("1.0", END)
        location_entry.delete(0, END)
        event_type_var.set("")

    add_window = Toplevel(root)
    add_window.title("Add New Event")
    add_window.geometry("600x830")

    Label(add_window, text="Add New Event", font=("Arial", 18, "bold")).pack(pady=10)

    # Event Title
    Label(add_window, text="Title:").pack(anchor="w", padx=20, pady=5)
    title_entry = Entry(add_window, width=40)
    title_entry.pack(padx=20, pady=5)

    # Date Picker
    Label(add_window, text="Date:").pack(anchor="w", padx=20, pady=5)
    cal = Calendar(add_window, selectmode='day', showweeknumbers=False, font=("Arial", 12), borderwidth=2)
    cal.pack(pady=5)

    # Start and End Time
    Label(add_window, text="Start Time:").pack(anchor="w", padx=20, pady=5)
    start_time_entry = Entry(add_window, width=20)
    start_time_entry.pack(padx=20, pady=5)

    Label(add_window, text="End Time:").pack(anchor="w", padx=20, pady=5)
    end_time_entry = Entry(add_window, width=20)
    end_time_entry.pack(padx=20, pady=5)

    # Description
    Label(add_window, text="Description:").pack(anchor="w", padx=20, pady=5)
    description_text = Text(add_window, height=5, width=50)
    description_text.pack(padx=20, pady=5)

    # Location
    Label(add_window, text="Location:").pack(anchor="w", padx=20, pady=5)
    location_entry = Entry(add_window, width=40)
    location_entry.pack(padx=20, pady=5)

    Label(add_window, text="Type:").pack(anchor="w", padx=20, pady=5)
    event_type_var = StringVar()
    event_type_dropdown = ttk.Combobox(add_window, textvariable=event_type_var, values=["Sports", "Food", "Entertainment", "Shopping", "Study"])
    event_type_dropdown.pack(padx=20, pady=5)

    error_label = Label(add_window, text="", font=("Arial", 12))
    error_label.pack(pady=10)
    Button(add_window, text="Save Event", command=save_event).pack(pady=10)

    Button(add_window, text="View Calendar", command=calendar_page).pack(pady=20)


Button(root, text="Add New Event", command=add_event_page, width=20).pack(pady=20)
Button(root, text="View Calendar", command=calendar_page, width=20).pack(pady=20)
Button(root, text="View Events", command=show_events_page, width=20).pack(pady=20)


root.mainloop()
